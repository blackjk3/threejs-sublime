{
        "scope": "source.js,source.js.embedded.html,source.coffee",
        "version": "r71", // Based on r49 completions, with some fixes.
        "completions":
        [
              "THREE",
              
              /**
                     INDEX
                     
                     1. Constants.
                     2. Methods.
              **/
              
              /*==================================
              =           1. Constants.          =
              ==================================*/
              
              /*==========  Custom Blending Equation.  ==========*/
              
              // Equations
              "THREE.AddEquation",
              "THREE.SubtractEquation",
              "THREE.ReverseSubtractEquation",
              "THREE.MinEquation",
              "THREE.MaxEquation",
              
              // Destination Factors
              "THREE.ZeroFactor",
              "THREE.OneFactor",
              "THREE.SrcColorFactor",
              "THREE.OneMinusSrcColorFactor",
              "THREE.SrcAlphaFactor",
              "THREE.OneMinusSrcAlphaFactor",
              "THREE.DstAlphaFactor",
              "THREE.OneMinusDstAlphaFactor",
              
              // Source Factors
              "THREE.DstColorFactor",
              "THREE.OneMinusDstColorFactor",
              "THREE.SrcAlphaSaturateFactor",
              
              /*==========  Materials.  ==========*/
              
              // Side.
              "THREE.FrontSide",
              "THREE.BackSide",
              "THREE.DoubleSide",
              // Shading.
              "THREE.NoShading",
              "THREE.FlatShading",
              "THREE.SmoothShading",
              // Colors.
              "THREE.NoColors",
              "THREE.FaceColors",
              "THREE.VertexColors",
              // Blending Mode.
              "THREE.NoBlending",
              "THREE.NormalBlending",
              "THREE.AdditiveBlending",
              "THREE.SubtractiveBlending",
              "THREE.MultiplyBlending",
              "THREE.CustomBlending",
              
              /*==========  GL State.  ==========*/

              // Cull Face
              "THREE.CullFaceNone",
              "THREE.CullFaceBack",
              "THREE.CullFaceFront",
              "THREE.CullFaceFrontBack",
              
              // Front Face Direction
              "THREE.FrontFaceDirectionCW",
              "THREE.FrontFaceDirectionCCW",
              
              /*==========  Shadowing Type.  ==========*/

              // Shadow Map
              "THREE.BasicShadowMap",
              "THREE.PCFShadowMap",
              "THREE.PCFSoftShadowMap",
              
              /*==========  Texture.  ==========*/
              
              // Operations
              "THREE.MultiplyOperation",
              "THREE.MixOperation",
              "THREE.AddOperation",
              
              // Mapping Modes
              "THREE.UVMapping",
              "THREE.CubeReflectionMapping",
              "THREE.CubeRefractionMapping",
              "THREE.EquirectangularReflectionMapping",
              "THREE.EquirectangularRefractionMapping",
              "THREE.SphericalReflectionMapping",
              
              // Wrapping Modes
              "THREE.RepeatWrapping",
              "THREE.ClampToEdgeWrapping",
              "THREE.MirroredRepeatWrapping",
              
              // Filters
              "THREE.NearestFilter",
              "THREE.NearestMipMapNearestFilter",
              "THREE.NearestMipMapLinearFilter",
              "THREE.LinearFilter",
              "THREE.LinearMipMapNearestFilter",
              "THREE.LinearMipMapLinearFilter",
              
              // Data Types
              "THREE.UnsignedByteType",
              "THREE.ByteType",
              "THREE.ShortType",
              "THREE.UnsignedShortType",
              "THREE.IntType",
              "THREE.UnsignedIntType",
              "THREE.FloatType",
              "THREE.HalfFloatType",
              
              // Pixel Types
              "THREE.UnsignedShort4444Type",
              "THREE.UnsignedShort5551Type",
              "THREE.UnsignedShort565Type",
              
              // Pixel Formats
              "THREE.AlphaFormat",
              "THREE.RGBFormat",
              "THREE.RGBAFormat",
              "THREE.LuminanceFormat",
              "THREE.LuminanceAlphaFormat",
              "THREE.RGBEFormat",
              
              // DDS / ST3C Compressed Texture Formats
              "THREE.RGB_S3TC_DXT1_Format",
              "THREE.RGBA_S3TC_DXT1_Format",
              "THREE.RGBA_S3TC_DXT3_Format",
              "THREE.RGBA_S3TC_DXT5_Format",
              
              // PVRTC Compressed Texture Formats
              "THREE.RGB_PVRTC_4BPPV1_Format",
              "THREE.RGB_PVRTC_2BPPV1_Format",
              "THREE.RGBA_PVRTC_4BPPV1_Format",
              "THREE.RGBA_PVRTC_2BPPV1_Format",
              
              /*================================
              =          2. Methods.           =
              ================================*/
              
              { "trigger": "THREE.PerspectiveCamera", "contents": "THREE.PerspectiveCamera( ${1:fov}, ${2:aspect}, ${3:near}, ${4:far} );$0" },
              { "trigger": "THREE.OrthographicCamera", "contents": "THREE.OrthographicCamera( ${1:left}, ${2:right}, ${3:top}, ${4:bottom}, ${5:near}, ${6:far} );$0" },
              
              { "trigger": "THREE.Clock", "contents": "THREE.Clock( ${1:autoStart} );$0" },
              { "trigger": "THREE.Color", "contents": "THREE.Color( ${1:hex} );$0" },
              { "trigger": "THREE.Face3", "contents": "THREE.Face3( a, b, c, normal, color, materialIndex );$0" },
              { "trigger": "THREE.Face4", "contents": "Face4( a, b, c, d, normal, color, materialIndex );$0" },
              { "trigger": "THREE.Frustrum", "contents": "THREE.Frustrum();$0" },
              { "trigger": "THREE.Geometry", "contents": "THREE.Geometry();$0" },
                                                          
              { "trigger": "THREE.Math", "contents": "THREE.Math;$0" },
              { "trigger": "THREE.Matrix3", "contents": "THREE.Matrix3();$0" },
              { "trigger": "THREE.Matrix4", "contents": "THREE.Matrix4( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );$0" },
              { "trigger": "THREE.Object3D", "contents": "THREE.Object3D();$0" },
              
              { "trigger": "THREE.Projector", "contents": "THREE.Projector();$0" },
              { "trigger": "THREE.Quaternion", "contents": "THREE.Quaternion();$0" },
              { "trigger": "THREE.Ray", "contents": "THREE.Ray();$0" },
              { "trigger": "THREE.Rectangle", "contents": "THREE.Rectangle();$0" },
              { "trigger": "THREE.Spline", "contents": "THREE.Spline();$0" },

              { "trigger": "THREE.UV", "contents": "THREE.UV( u, v );$0" },
              { "trigger": "THREE.Vector2", "contents": "THREE.Vector2( ${1:x}, ${2:y} );$0" },
              { "trigger": "THREE.Vector3", "contents": "THREE.Vector3( ${1:x}, ${2:y}, ${3:z} );$0" },
              { "trigger": "THREE.Vector4", "contents": "THREE.Vector4( ${1:x}, ${2:y}, ${3:z}, ${4:w} );$0" },

              { "trigger": "THREE.Light", "contents": "THREE.Light( ${1:hex} );$0" },
              { "trigger": "THREE.AmbientLight", "contents": "THREE.AmbientLight( ${1:hex} );$0" },
              { "trigger": "THREE.DirectionalLight", "contents": "THREE.DirectionalLight( ${1:hex}, ${2:intensity} );$0" },
              { "trigger": "THREE.PointLight", "contents": "THREE.PointLight( ${1:color}, ${2:intensity}, ${3:distance} );$0" },
              { "trigger": "THREE.SpotLight", "contents": "THREE.SpotLight();$0" },
              
              { "trigger": "THREE.Loader", "contents": "THREE.Loader();$0" },
              { "trigger": "THREE.BinaryLoader", "contents": "THREE.BinaryLoader();$0" },
              { "trigger": "THREE.JSONLoader", "contents": "THREE.JSONLoader();$0" },
              { "trigger": "THREE.SceneLoader", "contents": "THREE.SceneLoader();$0" },
              
              { "trigger": "THREE.Material", "contents": "THREE.Material( ${1:id}, ${2:name}, ${3:opacity}, ${4:transparent}, ${5:blending} );$0" },
              { "trigger": "THREE.LineBasicMaterial", "contents": "THREE.LineBasicMaterial( ${1:color}, ${2:linewidth}, ${3:linecap}, ${4:linejoin}, ${5:vertexColors} );$0" },
              { "trigger": "THREE.MeshBasicMaterial", "contents": "THREE.MeshBasicMaterial( ${1:color}, ${2:map}, ${3:shading}, ${4:wireframe} );$0" },
              { "trigger": "THREE.MeshDepthMaterial", "contents": "THREE.MeshDepthMaterial( ${1:morphTargets}, ${2:wireframe}, ${3:wireframeLinewidth} );$0" },
              { "trigger": "THREE.MeshFaceMaterial", "contents": "THREE.MeshFaceMaterial( ${1:materials} );$0" },
              { "trigger": "THREE.MeshLambertMaterial", "contents": "THREE.MeshLambertMaterial( ${1:color}, ${2:map}, ${3:shading}, ${4:wireframe} );$0" },
              { "trigger": "THREE.MeshNormalMaterial", "contents": "THREE.MeshNormalMaterial( ${1:wireframe}, ${2:wireframeLinewidth}, ${3:morphTargets} );$0" },
              { "trigger": "THREE.MeshPhongMaterial", "contents": "THREE.MeshPhongMaterial( ${1:color}, ${2:map}, ${3:shading}, ${4:wireframe} );$0" },
              { "trigger": "THREE.PointCloudMaterial", "contents": "THREE.PointCloudMaterial( ${1:color}, ${2:map}, ${3:size}, ${4:vertexColors} );$0" },
              //{ "trigger": "THREE.ParticleBasicMaterial", "contents": "THREE.ParticleBasicMaterial( ${1:parameters} );$0" },
              //{ "trigger": "THREE.ParticleCanvasMaterial", "contents": "THREE.ParticleCanvasMaterial( ${1:parameters} );$0" },
              //{ "trigger": "THREE.ParticleDOMMaterial", "contents": "THREE.ParticleDOMMaterial( ${1:parameters} );$0" },
              { "trigger": "THREE.ShaderMaterial", "contents": "THREE.ShaderMaterial( ${1:uniforms}, ${2:attributes}, ${3:defines}, ${4:vertexShader} );$0" },
              { "trigger": "THREE.RawShaderMaterial", "contents": "THREE.RawShaderMaterial( ${1:parameters} );$0" },
              
              { "trigger": "THREE.Bone", "contents": "THREE.Bone( belongsToSkin );$0" },
              { "trigger": "THREE.Line", "contents": "THREE.Line( geometry, material, type );$0" },
              { "trigger": "THREE.LOD", "contents": "THREE.LOD( ${1:objects});$0" },
              { "trigger": "THREE.Mesh", "contents": "THREE.Mesh( ${1:geometry}, ${2:material});$0" },
              { "trigger": "THREE.MorphAnimMesh", "contents": "THREE.MorphAnimMesh( ${1:geometry}, ${2:material});$0;" },
              { "trigger": "THREE.Particle", "contents": "THREE.Particle( ${1:material} );$0" },
              { "trigger": "THREE.ParticleSystem", "contents": "THREE.ParticleSystem( ${1:geometry}, ${2:material});$0" },
              { "trigger": "THREE.Ribbon", "contents": "THREE.Ribbon( ${1:geometry}, ${2:material});$0" },
              { "trigger": "THREE.SkinnedMesh", "contents": "THREE.SkinnedMesh( ${1:geometry}, ${2:material});$0" },
              { "trigger": "THREE.Sprite", "contents": "THREE.Sprite( ${1:parameters} );$0" },

              { "trigger": "THREE.CanvasRenderer", "contents": "THREE.CanvasRenderer( ${1:parameters} );$0" },
              { "trigger": "THREE.DOMRenderer", "contents": "THREE.DOMRenderer();$0" },
              { "trigger": "THREE.SVGRenderer", "contents": "THREE.SVGRenderer();$0" },
              { "trigger": "THREE.WebGLRenderer", "contents": "THREE.WebGLRenderer( ${1:parameters} );$0" },
              { "trigger": "THREE.WebGLRenderTarget", "contents": "THREE.WebGLRenderTarget( width, height, options );$0" },
              { "trigger": "THREE.WebGLRenderTargetCube", "contents": "THREE.WebGLRenderTargetCube( width, height, options );$0" },
              { "trigger": "THREE.ShaderChunk", "contents": "THREE.ShaderChunk;$0" },
              { "trigger": "THREE.ShaderLib", "contents": "THREE.ShaderLib;$0" },

              { "trigger": "THREE.RenderableFace3", "contents": "THREE.RenderableFace3();$0" },
              { "trigger": "THREE.RenderableFace4", "contents": "THREE.RenderableFace4();$0" },
              { "trigger": "THREE.RenderableLine", "contents": "THREE.RenderableLine();$0" },
              { "trigger": "THREE.RenderableObject", "contents": "THREE.RenderableObject();$0" },
              { "trigger": "THREE.RenderableParticle", "contents": "THREE.RenderableParticle();$0" },
              { "trigger": "THREE.RenderableVertex", "contents": "THREE.RenderableVertex();$0" },

              { "trigger": "THREE.Fog", "contents": "THREE.Fog( hex, near, far );$0" },
              { "trigger": "THREE.FogExp2", "contents": "THREE.FogExp2( hex, density );$0" },

              { "trigger": "THREE.Scene", "contents": "THREE.Scene();$0" },
              
              { "trigger": "THREE.DataTexture", "contents": "THREE.DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter );$0" },
              { "trigger": "THREE.Texture", "contents": "THREE.Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type );$0" },

              { "trigger": "THREE.ColorUtils", "contents": "THREE.ColorUtils$0" },
              { "trigger": "THREE.GeometryUtils", "contents": "THREE.GeometryUtils$0" },
              { "trigger": "THREE.ImageUtils", "contents": "THREE.ImageUtils$0" },
              { "trigger": "THREE.SceneUtils", "contents": "THREE.SceneUtils$0" },
              { "trigger": "THREE.ShaderUtils", "contents": "THREE.ShaderUtils$0" },

              { "trigger": "THREE.Animation", "contents": "THREE.Animation( root, data, interpolationType, JITCompile );$0" },
              { "trigger": "THREE.AnimationHandler", "contents": "THREE.AnimationHandler();$0" },
              { "trigger": "THREE.AnimationMorphTarget", "contents": "THREE.AnimationMorphTarget( root, data );$0" },
              { "trigger": "THREE.KeyFrameAnimation", "contents": "THREE.KeyFrameAnimation( root, data, JITCompile );$0" },

              { "trigger": "THREE.CombinedCamera", "contents": "THREE.CombinedCamera( width, height, fov, near, far, orthonear, orthofar );$0" },
              { "trigger": "THREE.CubeCamera", "contents": "THREE.CubeCamera( near, far, cubeResolution );$0" },

              { "trigger": "THREE.FirstPersonControls", "contents": "THREE.FirstPersonControls( object, domElement );$0" },
              { "trigger": "THREE.FlyControls", "contents": "THREE.FlyControls( object, domElement );$0" },
              { "trigger": "THREE.PathControls", "contents": "THREE.PathControls( object, domElement );$0" },
              { "trigger": "THREE.RollControls", "contents": "THREE.RollControls( object, domElement );$0" },
              { "trigger": "THREE.TrackballControls", "contents": "THREE.TrackballControls( object, domElement );$0" },

              { "trigger": "THREE.BufferGeometry", "contents": "THREE.BufferGeometry();$0" },
              { "trigger": "THREE.Curve", "contents": "THREE.Curve();$0" },
              { "trigger": "THREE.CurvePath", "contents": "THREE.CurvePath();$0" },
              { "trigger": "THREE.EventTarget", "contents": "THREE.EventTarget();$0" },
              { "trigger": "THREE.Gyroscope", "contents": "THREE.Gyroscope();$0" },
              { "trigger": "THREE.Path", "contents": "THREE.Path( points );$0" },
              { "trigger": "THREE.Shape", "contents": "THREE.Shape();$0" },
              { "trigger": "THREE.TextPath", "contents": "THREE.TextPath( text, parameters );$0" },

              { "trigger": "THREE.CubeGeometry", "contents": "THREE.CubeGeometry( width, height, depth, segmentsWidth, segmentsHeight, segmentsDepth, materials, sides );$0" },
              { "trigger": "THREE.CylinderGeometry", "contents": "THREE.CylinderGeometry( radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded );$0" },
              { "trigger": "THREE.ExtrudeGeometry", "contents": "THREE.ExtrudeGeometry( shapes, options );$0" },
              { "trigger": "THREE.IcosahedronGeometry", "contents": "THREE.IcosahedronGeometry( radius, detail );$0" },
              { "trigger": "THREE.LatheGeometry", "contents": "THREE.LatheGeometry( points, steps, angle );$0" },
              { "trigger": "THREE.OctahedronGeometry", "contents": "THREE.OctahedronGeometry( radius, detail );$0" },
              { "trigger": "THREE.PlaneGeometry", "contents": "THREE.PlaneGeometry( width, depth, segmentsWidth, segmentsDepth );$0" },
              { "trigger": "THREE.PolyhedronGeometry", "contents": "THREE.PolyhedronGeometry( vertices, faces, radius, detail );$0" },
              { "trigger": "THREE.SphereGeometry", "contents": "THREE.SphereGeometry( radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength );$0" },
              { "trigger": "THREE.TetrahedronGeometry", "contents": "THREE.TetrahedronGeometry( radius, detail );$0" },
              { "trigger": "THREE.TextGeometry", "contents": "THREE.TextGeometry( text, parameters );$0" },
              { "trigger": "THREE.TorusGeometry", "contents": "THREE.TorusGeometry( radius, tube, segmentsR, segmentsT, arc );$0" },
              { "trigger": "THREE.TorusKnotGeometry", "contents": "THREE.TorusKnotGeometry( radius, tube, segmentsR, segmentsT, p, q, heightScale );$0" },

              { "trigger": "THREE.AxisHelper", "contents": "THREE.AxisHelper();$0" },
              { "trigger": "THREE.CameraHelper", "contents": "THREE.CameraHelper();$0" },

              { "trigger": "THREE.SubdivisionModifier", "contents": "THREE.SubdivisionModifier( subdivisions );$0" },

              { "trigger": "THREE.LensFlare", "contents": "THREE.LensFlare( texture, size, distance, blending, color );$0" },

              { "trigger": "THREE.LensFlarePlugin", "contents": "THREE.LensFlarePlugin();$0" },
              { "trigger": "THREE.ShadowMapPlugin", "contents": "THREE.ShadowMapPlugin();$0" },
              { "trigger": "THREE.SpritePlugin", "contents": "THREE.SpritePlugin();$0" },

              { "trigger": "THREE.ShaderFlares", "contents": "THREE.ShaderFlares;$0" },
              { "trigger": "THREE.ShaderSprite", "contents": "THREE.ShaderSprite;$0" }
        ]
}
